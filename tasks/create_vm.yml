- name: Assert parameters
  assert:
    that:
    - vm_name is defined
    - "'.' not in vm_name"
    - vm_name | length < 15
    - cpu_sockets is defined
    - cpu_sockets | int > 0
    - cpu_cores is defined
    - cpu_cores | int > 0
    - ram_mb is defined
    - ram_mb | int > 0
    - ( ram_mb | int ) % 512 == 0
    - disk_gb is defined
    - disk_gb | int > 0
    - vlan is defined
    - vlan | int > 0
    - template_name is defined
    - proxmox_node is defined
  tags:
  - always

# https://pve.proxmox.com/pve-docs/api-viewer/index.html#/cluster/resources
- block:
  - name: Retrieve all VMs info
    uri:
      validate_certs: no
      url: "https://{{ proxmox_host }}/api2/json/cluster/resources?type=vm"
      method: GET
      headers: "{{proxmox_auth_headers}}"
    register: cluster_resources

  - name: Ensure that specified vm_name is available
    fail:
      msg: "{{vm_name}} already exists"
    when: vm_name in (cluster_resources.json.data | map(attribute='name') | list)

  - name: Ensure that specified vm_id is available
    fail:
      msg: "VM with ID={{vm_id}} already exists"
    when: vm_id is defined and vm_id in (cluster_resources.json.data | map(attribute='vmid') | list)

  # Format: VMID = "<VLANID%3chars><VM_INDEX%3chars>"
  - name: Use next vm_id available
    set_fact:
      vm_id: "
        {%- set all_vmid = cluster_resources.json.data | map(attribute='vmid') | list -%}
        {%- set tmp = [] -%}
        {%- for vmid in all_vmid -%}
          {%- if vmid |string| regex_search('^'+vlan|string) -%}
            {{ tmp.append(vmid%1000) }}
          {%- endif -%}
        {%- endfor -%}
        {%- set next_ids_available = range(1, 1000) | list | difference(tmp) | sort -%}
        {%- set host_index_offset = play_hosts.index(inventory_hostname) -%}
        {%- set next_id = next_ids_available[host_index_offset] -%}
        {{ vlan|string+'%03d' | format(next_id | int) }}"
    when: vm_id is not defined
  tags:
  - always

- name: "Create VM from {{template_name}}: {{vm_name}} (vm_id={{vm_id}})"
  proxmox_kvm:
    api_user: "{{proxmox_user}}"
    api_password: "{{proxmox_pass}}"
    api_host: "{{proxmox_host}}"
    node: "{{proxmox_node}}"
    newid: "{{vm_id}}"
    name: "{{vm_name}}"
    clone: "{{template_name}}"
    storage: "{{datastore}}"
    format: qcow2
    timeout: 500
  register: clonation

- block:
  - name: "Prepare config: Configure CPU and RAM"
    set_fact:
      cpu_ram_vm_config:
        sockets: "{{cpu_sockets}}"
        cores: "{{cpu_cores}}"
        memory: "{{ram_mb}}"
        balloon: "{{ram_mb//2 if ballooning and ram_mb > 512 else omit}}"
  - set_fact:
      vm_config: "{{ vm_config | default({}) | combine(cpu_ram_vm_config) }}"
  tags:
  - config
  - compute_config

# https://pve.proxmox.com/pve-docs/api-viewer/#/nodes/{node}/qemu/{vmid}/resize
# https://stackoverflow.com/a/55552593
- name: Resize VM disk
  uri:
    validate_certs: no
    url: "https://{{ proxmox_host }}/api2/json/nodes/{{ proxmox_node }}/qemu/{{ vm_id }}/resize"
    method: PUT
    headers: "{{proxmox_auth_headers}}"
    body_format: form-urlencoded
    body:
      disk: scsi0
      size: "{{ disk_gb }}G"
  register: storage
  tags:
  - config
  - storage_config

- block:
  # https://pve.proxmox.com/pve-docs/api-viewer/index.html#/nodes/{node}/qemu/{vmid}/config
  # Preserve MAC addr - https://forum.proxmox.com/threads/proxmox-api-change-vm-network-configuration.68764/
  - name: Get network interface info
    uri:
      validate_certs: no
      url: "https://{{ proxmox_host }}/api2/json/nodes/{{proxmox_node}}/qemu/{{vm_id}}/config"
      method: GET
      headers: "{{proxmox_auth_headers}}"
    register: network
  - name: "Prepare config: Set net0 config"
    set_fact:
      network_mac_addr: "{{network.json.data.net0 | regex_replace('^.*virtio=([A-Z0-9:]+).*$', '\\1') | default(omit) }}"
      net0: "model=virtio{{ (',macaddr=' + network_mac_addr) if network_mac_addr is defined else ''}},bridge={{network_bridge}},firewall=1,tag={{vlan}}"
  - set_fact:
      vm_config: "{{ vm_config | default({}) | combine({'net0': net0}) }}"
  tags:
  - config
  - network_config

- name: "Prepare config: Enable Qemu Agent"
  set_fact:
    vm_config: "{{ vm_config | default({}) | combine({'agent': 'enabled=1'}) }}"
  tags:
  - config
  - qemuagent_config

# https://pve.proxmox.com/pve-docs/api-viewer/index.html#/nodes/{node}/qemu/{vmid}/config
- name: Configure VM
  uri:
    validate_certs: no
    url: "https://{{ proxmox_host }}/api2/json/nodes/{{proxmox_node}}/qemu/{{vm_id}}/config"
    method: PUT
    headers: "{{proxmox_auth_headers}}"
    body_format: form-urlencoded
    body: "{{vm_config}}"
  when: vm_config is defined
  tags:
  - config
  - compute_config
  - network_config
  - qemuagent_config

- block:
  # https://pve.proxmox.com/pve-docs/api-viewer/index.html#/nodes/{node}/qemu/{vmid}/status/start
  - name: Start VM
    uri:
      validate_certs: no
      url: "https://{{ proxmox_host }}/api2/json/nodes/{{proxmox_node}}/qemu/{{vm_id}}/status/start"
      method: POST
      headers: "{{proxmox_auth_headers}}"
      body_format: form-urlencoded
  - name: Get VM info
    uri:
      validate_certs: no
      url: "https://{{ proxmox_host }}/api2/json/nodes/{{proxmox_node}}/qemu/{{vm_id}}/agent/network-get-interfaces"
      method: GET
      headers: "{{proxmox_auth_headers}}"
      body_format: form-urlencoded
    register: info
    until: not info.failed and info.json.data.result | json_query(_query_no_loopback_addresses) | json_query(_query_ipv4_addresses) | default([]) | list | length > 0
    retries: 20
    delay: 6
  - name: Retrieve IPv4 address
    set_fact:
      vm_ipv4: "{{ info.json.data.result | json_query(_query_no_loopback_addresses) | json_query(_query_ipv4_addresses) | first }}"
  tags:
  - start_vm

- name: Generate properties file
  copy:
    content: |
      vm_id={{vm_id}}
      vm_name={{vm_name}}
      vm_ipv4={{vm_ipv4}}
      network_mac_addr={{network_mac_addr | default("null")}}
    dest: "{{output_properties_file}}"
  when: output_properties_file is defined
